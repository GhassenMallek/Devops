        pipeline {
            agent any
            environment {
                NEXUS_VERSION = "nexus3"
                NEXUS_PROTOCOL = "http"
                NEXUS_URL = "172.10.0.55:8081"
                NEXUS_REPOSITORY = "maven-releases"
                NEXUS_CREDENTIAL_ID = "Nexus-Creds"
                DOCKER_CREDENTIAL_ID = "Docker-Creds"
                VERSION = "1.${env.BUILD_NUMBER}"
                DOCKER_CREDS = credentials('Docker-Creds')
              }
            stages {
                stage('Checkout GIT') {
                    steps {
                        echo 'Pulling..'
                        git branch: 'Rami',
                        url : 'https://github.com/MGhassen30798/Devops'
                    }
                }
                stage('MVN Clean') {
                    steps {
                        dir('Spring/tpAchatProject') {
                            sh """mvn clean install -Drevision=${env.BUILD_NUMBER}"""
                        }
                    }
                }
                stage('MVN Compile') {
                    steps {
                        dir('Spring/tpAchatProject') {
                            sh """mvn compile -Drevision=${env.BUILD_NUMBER}"""
                        }
                    }
                }
                stage('MVN Test') {
                    steps {
                        dir('Spring/tpAchatProject') {
                            sh """mvn test -Drevision=${env.BUILD_NUMBER}"""
                        }
                    }
                }
                stage('Sonar'){
                    steps{
                        dir('Spring/tpAchatProject') {
                            sh """mvn -X sonar:sonar  -Dsonar.projectKey=project123 -Drevision=${env.BUILD_NUMBER} -Dsonar.host.url=http://172.10.0.55:9000 -Dsonar.login=6a8dd042d6628449cd63479d5da3cbc4ec348a2f"""
                        }
                    }
                }
                stage('Nexus'){
                    steps{
                        dir('Spring/tpAchatProject') {
                            sh """mvn clean package deploy:deploy-file -DgroupId=com.esprit.examen -DartifactId=tpAchatProject -Dversion=1.${env.BUILD_NUMBER} -DgeneratePom=true -Dpackaging=jar -DrepositoryId=deploymentRepo -Durl=http://172.10.0.55:8081/repository/maven-releases/ -Dfile=target/tpAchatProject-1.${env.BUILD_NUMBER}.jar -Drevision=${env.BUILD_NUMBER}"""
                                }
                            }
                        }
      stage('Pull the file off Nexus') {
        steps {
          dir('Spring/tpAchatProject') {
            withCredentials([usernameColonPassword(credentialsId: 'Nexus-Creds', variable: 'NEXUS_CREDENTIALS')]) {
              sh script: 'curl -u ${NEXUS_CREDENTIALS} -o /var/lib/jenkins/workspace/Devops/Spring/tpAchatProject/target/tpachat.jar "$NEXUS_URL/repository/$NEXUS_REPOSITORY/com/esprit/examen/tpAchatProject/$VERSION/tpAchatProject-$VERSION.jar"'
            }
          }
        }
      }
                stage('Building Docker Image Spring') {
                      steps {
                        dir('Spring/tpAchatProject') {
                          sh 'docker build -t $DOCKER_CREDS_USR/tpachatback .'
                        }
                      }
                    }
                    stage('Building Docker Image Angular') {
                      steps {
                        dir('Angular/crud-tuto-front') {
                          sh 'docker build -t $DOCKER_CREDS_USR/tpachatfront .'
                        }
                      }
                    }
                    stage('Login to DockerHub') {
                      steps {
                        dir('Spring/tpAchatProject') {
                          echo DOCKER_CREDS_USR
                          sh('docker login -u $DOCKER_CREDS_USR -p $DOCKER_CREDS_PSW')
                        }
                      }
                    }
                    stage('Push to DockerHub (Angular and Spring )') {
                      steps {
                        dir('Spring/tpAchatProject') {
                          sh 'docker push $DOCKER_CREDS_USR/tpachatback'
                          sh 'docker push $DOCKER_CREDS_USR/tpachatfront'
                        }
                      }
                    }
                stage('Docker Compose'){
                    steps{
                       dir('Spring/tpAchatProject'){
                            sh 'docker-compose up -d'
                            }
                       }
                    }
                }
            }
